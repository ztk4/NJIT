Names

    What do they look like in a language?
    What do they mean?

    Important Terms:
        Binding - what's associated to a name
        Scope - visibility of a name
        Lifetime - how long does the name last, when does it start

Bindings

    - An association between an entity and a property (name and a value)
    Static - static binding is a binding that occurs before runtime
    Dynamic - dynamic binding is a binding that occurs at runtime

Syntactic Issues

    What are the lexical rules?
    Is there a collection of reservered words or keywords
    Are names case sensitive?
        C-like:             yes
        Early Languages:    no
        SQL:                no (except somtimes also)
        PHP:                sometimes..lol

Reserved Words

    Cannot be used as identifiers
    Usually identify major constructs {if while switch...}
    
    Predefined Identifiers
        In some languages, library routines might be reserverd for example
        In other languages, library routines are just names, but after importing they are now taken

Variables

    Basic Bindings
        Name        - Follows lexical rules
        Address     - where in mem
        Type        - _more on this later_
        Value       - what is stored in mem that is bound by name
        Lifetime    - Creation/Deletion

Addresses

    Generally, when a program is run, memory is divided into segments
        OS often controls permissions in these segments
        Runtime is responsible for managing memory

    Possible Regions
        Code
        Data
        Heap
        Stack

Example:

    int outside; //external, goes into data segment

    //code for function goes into code segment
    void myFunc() {
        //These two vars are put on stack (when function is called)
        SomeClass x;
        SomeClass *p;

        //the memory returned by new is on the heap
        p = new SomeClass();

    }

Scope

    The scope of a name is the collection of stmts which can access the name binding
    In static scoping, this is done relative to source code surrounding name
    Usually, this is doen statically (or lexical)

Scopes
    
    Either Disjoint or Nested

    Possible Scopes:
        Java Packages
        C++ Namespaces
        Classes
        Functions
        Blocks
        For Loops

The Scope in which a variable is defined/declared is called its Defining Scope

A reference to a name is nonlocal if it occurs in a nested scope of the defining scope, otherwise it is local

Controlling The Scope

    Some languages support access modifiers that can further restrict access to variables that are still in scope.
    Some languages support scope resolution to do away with ambiguity between names in nested scopes that appear in parent scopes

Symbol Table

    Structure kept by translator that allows it to keep track of declared names and their binding
    Only needed for compile time (for compiled languages) but is often included in executable anyhow

Process

    1. Each time a scope is entered, push a new dictionary (symbol table) onto the stack
    2. Each time a scipe is exited, pop a dictionary off the top of the stack
    3. For each name declared, generate and appropriate binding and enter the name-binding pair into the dictionary on the top of the stack
    4. Given a name reference, search the dictionary on top of the stack:
        a) If found, return binding
        b) Otherwise, repeat the process of the next dictionary down in the stack
        c) If the name is not found in any dictionary, report an error

Dynamic Scoping

    In dynamic scoping, a name is bound to its most recent declaration based on the program's call history
    Used in early LISP, APL, Snobol, Perl
    Symbol table for each scope is built at compile time, but managed at run time

Visibility
    
    Inner declarations can hide outer declarations
    this and scope resolution operators can help absolve this issue

Scope Resolution Operator

    Scope::variable
    NOTE:
        ::variable references global scope to find variable

nm executable       -> shows symbol table for executable
nm exec | c++filt   -> filters the mangled names and unmangles them

Lifetime

    Early languages used static allocation, one copy that lasts forever
    Later languages used dynamically allocated memory based on scope entry/exit

Static Variables

    C:
        Global compilation scope: variables exist forever
        Explicitly declaring a variable static
            exist forever
            visibility is changed - only visible when in its scope (not globally)
        Static functions:
            onyl visible in the file they're defined in

    C++:
        static classes, class members, and methods
    Java also
