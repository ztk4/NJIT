Syntax Analysis

    Low-Level part called a lexical analyzer
        a finite automaton based on a regular grammar

    High-Level part called a syntax analyzer
        a push-down automaton based on context-free grammar (represented in BNF)

Using BNF

    Provides clear and concise syntax description
    Parser can be built directly on BNF
    Parses based on BNF are easy to maintain

Reasons to break analysis into two parts

    Simplicity - less complex to do this in two parts
    Efficiency - separation allows optimization of the lexical analyzer
    Portability - lexical analyzer is not always portable, but parser is

Lexical Analyzer

    Pattern matcher for character strings
    "Front-End" for the parser
    Identifies substrings that belong together (tokens) - lexemes

    Usually a function that recognizes tokens
        Called by the parser when a token is needed

    Three apporaches to building a lexical analyzer:

        1. Write a formal description of the tokens and use a software tool that constructs a table-driven lexical analyzer
        2. Design a state diagram that describes the tokens and writes a program the implements the state diagram
        3. Design a state diagram that describes the tokens and contruct a table-driven implementation of the state diagram

    Sometimes valid tokens can also be reserved keywords, and so an identifier could seem valid but actually be a keyword
        Use table to keep track of keywords

    Example:                             Letter/Digit (addChar; getChar)
                                              v--|
        Start -> Letter (addChar; getChar) -> id --> return lookup (lexeme)
           |---> Digit (addChar; getChar) -> int -->  return Int_Lit
                                              ^--|
                                              Digit (addChar; getChar)

Regular Grammars

    Simple set of rules about what a valid string is in a language
    Regular Grammars are the simplest and least powerful grammars
    Useful in expressing and recognizing tokens

Notation of Regular Grammars

    Set of:
        Productions: P
        Terminal Symbols: T
        Nonterminal Symbols: N
    A production has the form:
        A -> (omega) B
        A -> (omega)
        (omega) (element of) T*
        B (element of) N 
    Where A, B (element of N), (omega) (element of) T

    Regular Grammars have one nonterminal sumbol on the left, and at most one on the right, which must be either the first or last characters

Problems we might get
    
    Given a regular expression, does a string match it? (take a look at regex crossword)
    Write a regular expression given requirements
    Look at regex as state machine, and analyze it
    Look at regex as string, draw state machine
