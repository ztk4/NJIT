# A sample Makefile for building both Google Mock and Google Test and
# using them in user tests.  This file is self-contained, so you don't
# need to use the Makefile in Google Test's source tree.  Please tweak
# it to suit your environment and project.  You may want to move it to
# your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GMOCK_HEADERS and GTEST_HEADERS, which you can use
# in your own targets but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file, or if you want to use
# a copy of Google Test at a different location.
GTEST_DIR = ../gtest/googletest

# Points to the root of Google Mock, relative to where this file is.
# Remember to tweak this if you move this file.
GMOCK_DIR = ../gtest/googlemock

# Compiler to use
CXX = g++

# Flags passed to the preprocessor.
# Set Google Test and Google Mock's header directories as system
# directories, such that the compiler doesn't generate warnings in
# these headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include -isystem $(GMOCK_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -std=c++11 -O3 -Wall -Wextra -pthread

# Flags passed to the C++ linker.
LDFLAGS += -lpthread

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = timeout_test message_test socket_test message_io_test message_flow_test thread_pool_test distance_vector_table_test

# All targets produced by this Makefile.
TARGETS = router0 router1

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# All Google Mock headers. Note that all Google Test headers are
# included here too, as they are #included by Google Mock headers.
# Usually you shouldn't change this definition.	
GMOCK_HEADERS = $(GMOCK_DIR)/include/gmock/*.h \
                $(GMOCK_DIR)/include/gmock/internal/*.h \
                $(GTEST_HEADERS)

# House-keeping build targets.

.PHONY: all test check debug clean

all : CXXFLAGS+= -DNDEBUG
all : $(TARGETS)

debug : CXXFLAGS+= -g
debug : $(TARGETS)

test : CXXFLAGS+= -g
test : $(TESTS)

check : CXXFLAGS+= -DNDEBUG
check : $(TESTS)
	@for test in *_test; do echo "Running $${test}..."; ./$${test}; done

clean :
	rm -f $(TESTS) router0 router1 gmock.a gmock_main.a gtest.a gtest_main.a *.o

# Builds gmock.a and gmock_main.a.  These libraries contain both
# Google Mock and Google Test.  A test should link with either gmock.a
# or gmock_main.a, depending on whether it defines its own main()
# function.  It's fine if your test only uses features from Google
# Test (and not Google Mock).

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)
GMOCK_SRCS_ = $(GMOCK_DIR)/src/*.cc $(GMOCK_HEADERS)

# For simplicity and to avoid depending on implementation details of
# Google Mock and Google Test, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Mock and
# Google Test compile fast and for ordinary users their source rarely
# changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
	    -c $(GTEST_DIR)/src/gtest_main.cc

gmock-all.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock-all.cc

gmock_main.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

gmock.a : gmock-all.o gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gmock_main.a : gmock-all.o gtest-all.o gmock_main.o
	$(AR) $(ARFLAGS) $@ $^

# GMOCK TESTS

distance_vector_table_test.o : distance_vector_table_test.cpp distance_vector_table.h $(GMOCK_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

distance_vector_table_test : distance_vector_table_test.o distance_vector_table.o gmock_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@ $(LDFLAGS)

message_io_test.o : message_io_test.cpp message_io.h message.h socket.h mock_socket.h $(GMOCK_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

message_io_test : message_io_test.o message_io.o message.o socket.o gmock_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@ $(LDFLAGS)

message_flow_test.o : message_flow_test.cpp message_flow.h message_io.h message.h socket.h timeout.h mock_timeout.h mock_socket.h $(GMOCK_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

message_flow_test : message_flow_test.o message_flow.o message_io.o message.o socket.o timeout.o gmock_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@ $(LDFLAGS)

# GTEST TESTS

thread_pool_test.o : thread_pool_test.cpp thread_pool.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

thread_pool_test : thread_pool_test.o thread_pool.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@ $(LDFLAGS)

timeout_test.o : timeout_test.cpp timeout.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

timeout_test : timeout_test.o timeout.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@ $(LDFLAGS)

message_test.o : message_test.cpp message.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

message_test : message_test.o message.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@ $(LDFLAGS)

socket_test.o : socket_test.cpp socket.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

socket_test : socket_test.o socket.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@ $(LDFLAGS)

# REGULAR TARGETS

timeout.o : timeout.cpp timeout.h logging.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

thread_pool.o : thread_pool.cpp thread_pool.h logging.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

message_io.o : message_io.cpp message_io.h message.h socket.h logging.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

message_flow.o : message_flow.cpp message_flow.h message_io.h message.h socket.h timeout.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

driver0.o : driver.cpp message_io.h message_flow.h socket.h timeout.h
	$(CXX) $(CPPFLAGS) -DR0 $(CXXFLAGS) -c $< -o $@

driver1.o : driver.cpp message_io.h message_flow.h socket.h timeout.h
	$(CXX) $(CPPFLAGS) -DR1 $(CXXFLAGS) -c $< -o $@

router0 : driver0.o message_io.o message_flow.o message.o timeout.o socket.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@ $(LDFLAGS)

router1 : driver1.o message_io.o message_flow.o message.o timeout.o socket.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@ $(LDFLAGS)

# Pattern for simple object files depending on a single source file and a single header file
%.o : %.cpp %.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<
