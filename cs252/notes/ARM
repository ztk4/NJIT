The ARM Instrction Set
    (Advanced RISC Machines)

Main Features

    All instructions are 32 bits
    Most instructions execute in a single cycle
    Every instruction an be conditionally executed
    Load/Store Architecture
        Data proc only done on registers
            Combined ALU and shifter for high speed bit manipulation
        Powerful auto-index addr mode
            32 bit and 8 bit data types
                and also 16 bit types on ARM arch v4
            Flexible multiple register load and store instructions

    Instruction set extension via co-proc (like adding floating points)

Modes
    The ARM has 6 operating Modes
        User - Unprivelaged (only one avail to us)
        FIQ - fast interrupt
        IRQ - Slow interrupt
        Supervisor - su
        Abort - handles mem access violations
        Undef - handles undefined instructions
    
Registers
    ARM has 37 registers, all 32-bits long
        1 dedicated PC
        1 dedicated Program status
        5 dedicated saved program status
        30 general purpose

    However, they are in banks reserved for certain modes
        r0-r12 registers
        r13 (SP) and r14 (LR)
        r15 (PC)

Accessing Registers using ARM Instructions

    No breakdown of currently accessibly registers
        All instructions can access r0-r14 directly
        Most instructions also allow use of r15
    Some instrctions allow use of CPSR (Current Program status) and SPSR (Saved Program Status)

CSPRs and SPSRs
    31 28       8   4   0  
    [NZCV.......IFT MODE]

    N - Negative ALU flag
    Z - 0 ALU flag
    C - Carry ALU flag
    V - oVerflow ALU flag

    I - 1, disables IRQ
    F - 1, diables FIQ
    T - 1, thumb proc

Condition Flags

    Flags       Logical                     Arithmetic
    N           No meaning                  Negative Result
    Z           Result is 0                 Result is 0
    C           After Shift, carry is 1     Carry bit
    V           No meaning                  Operation oVerflowed

Program Counter (R15)

    PC value is bits [31:2], whereas [1:0] are always 0's (must be word aligned, 4-byte word)
    R14 is the dedicated LR, used during bl

Exception Handling and the Vector Table

    On interrupt
        Save CPSR into SPSR_<mode>
        Set appropriate CPSR bits
        Maps in appropriate banked registers
        Stores the "return addr" in LR_<mode>
        Sets the PC to vector addr

    To Return
        Restore CPSR from SPSR_<mode>
        Restores PC from LR_<mode>

    Stack
        Reset
        Undefined Instructions
        Software Interrupt

The Instruction Pipeline

    ARM

    PC          FETCH
    PC - 4      DECODE
    PC - 8      ENCODE

Conditional Execution

    First four bits of instruction encode condition
    Pneumonics prepended to instruction tells assembler how to fill first 4 bits
    Lookup ARM condition table for details
    ADD is assumed to be ADDAL, whereas ADDEQ is needed to specify EQ and ADDS is needed to specify to set bits
    S is appended after the 2 character condition sequence (requests bits be modified)

Arithmetic Operations:

    ADD     op1 + op2
    ADC     op1 + op2 + carry
    SUB     op1 - op2
    SBC     op1 - op2 + (carry - 1)
    RSB     op2 - op1;  REVERSE SUB
    RSC     op2 - op1 + (carry - 1); REVERSE SBC

    Syntax:

        <Operation>{<cond<>}{S} Rd, Rn, Operand2

    Examples:

        ADD     r0, r1, r2
        SUBGT   r3, r3, #1
        RSBLES  r4, r5, #5

Comparative Operations:

    NO NEED TO SET S in opcode because conditionals' only purpose is to set flags
        ALL COMPARATIVE OPS SET FLAGS

    CMP     op1 - op2; result not written
    CMN     op1 + op2; result not written (CMP negative)
    TST     op1 & op2; result not written
    TEQ     op1 ^ op2; result not written

    Syntax:
        <Operation>{<cond>} Rn, Operand2

    Examples:
        CMP     r0, r1
        TSTEQ   r0, r1

Logical Operations:

    AND     op1 & op2;
    EOR     op1 ^ op2;
    ORR     op1 | op2;
    BIC     op1 &~op2; bit clear - takes op1 and the compliment of op2 (mask of everything not set in op2)

    Syntax:
        <Operation>{<cond>}{S} Rd, Rn, Operand2

    Examples:
        AND     r0, r1, r2;
        BICEQ   r2, r3, #7
        EORS    r1, r3, r0;

Data Movement Operations:

    MOV     op2;
    MVN     ~op2;
    ; THESE MAKE NO USE OF CONTENTS OF OP1

    Syntax:
        <Operation>{<cond>}{S} Rd, Operand2

    Examples:
        MOV     r0, r1
        MOVS    r2, #10
        MVNEQ   r1, #0

Barrel Shifter

    ARM doesn't have an instruction for shift
    Instead it has a barrel shifter which provides a mechanism to carry out shifts as part of other instructions

    LSL op; shifts 0's in LSD and last digit out MSD stays in carry
    LSR op; shifts 0's in MSD and last digit out LSD stays in carry
    ASR op; shifts 0's in MSD (beings leftmost bit after sign bit) and last digit out LSD stays in carry

    ROR op; shifts all bits right, and LSD into MSD. Last digit moved from LSD to MSD is left in carry
    RRX op; shifts all bits right, and LSD into carry and carry into MSD (RRX ONLY SHIFTS 1 BIT)
    
Using the Barrel Shifter

    Op1     Op2
     |       |
     |    Shifter
     |       |
     ---------
     |  ALU  |
     ---------
         |
         v
       Result

    If Op2 is a register, then shift value can be immediate 5-bit value (no overhead), or the lower half of a register (slower bc third register access - takes one extra clock cycle)
        The latter is the same as machines with separate shift operators
    If Op2 is a immediate value, then ...

    If no shift is applied, LSL #0 is encoded

    Syntax:
        ADD r0, r1, r2, LSL #2; shifts r2's value by 2 before adding to r1 and storing in r0

    r0  = r1 * 5
        = r1 + r1 * 4
        = r1 + (r1 << 2)
        
        ADD r0, r1, r1, LSL #2;

    r2  = r3 * 105
        = r3 * 15 * 7
        = r3 * (16 - 1) * (8 - 1)
    r2  = (r3 << 4) - r3; r2 = (r2 << 3) - r2

        RSB r2, r3, r3, LSL #4
        RSB r2, r2, r2, LSL #3

Multiplication:

    MUL Rd, Rm, Rs;             Rd = Rm * Rs
    MLA Rd, Rm, Rs, Ra;         Rd = (Rm* Rs) + Ra

    MULL RdLo, RdHi, Rm, Rs;    MUL but 64-bits
    MLAL RdLo, RdHi, Rm, Rs;    MLA but 64-bits

Load/Store Instrcutions

    LDR and STR for words
    LDRB and STRB for bytes

    LDM and STM for loading and storing multiple

    SWP - single data swap

    <LDR/STR>{<condition>}{<size>} Rn, <address>

Store Options:

    STR r0, [r1]                ; puts r0 into addr stored in r1
    STR r0, [r1, #12]           ; puts r0 into addr stored in r1 + 12
    STR r0, [r1, r2]            ; puts r0 into addr stored in r1 + val stored in r2
    STR r0, [r1, r2, LSL #3]    ; puts r0 into addr stored in r1 + (val stored in r2 shifted left 3 times)
    STR r0, [r1, r2]!           ; puts r0 into addr stored in r1 + val stored in r2, r1 += r2
    STR r0, [r1], r2            ; r1 += r2, puts r0 into addr now stored in r1

Swap Instruction
    
    SWP{{<cond>}{B} Rd, Rm, [Rn]

Pseudo-Instructions

    .section -> chunks of .data or .text
    
    ADR -> load addr into a register
        ADR R0, BUFFER
        ADR R0, =BUFFER
    
    .align 2 -> asjust location counter to word boundary
        usually done after storage directive
    
    .end -> no more to assemble

    .int -> defined word (4 bytes) value storage area
        BOW: .int 1024, 2055, 9051;     treat all after .int as ints

    .byte -> defined byte (1 byte) value storage area
        BOB: .byte 10, 12, 15

    .fill -> zeroed out byte storage area
        BLBBYTE: .fill 30, 1, 0 @ amount, size value

    .global -> name of routine to export for use in other routines
        .global add2 @ add2 routine

        NECESARY FOR LINKER TO LINK OBJECT FILES

    .equ -> symbol for replacement (macro basically)
        loopcnt .equ 5


Register Name Mapping

Numbers: 0-15
Alias 1: r0-r15
Alias 2: a1-a4, v1-v5, v6/sb, v7/sl, fp, ip, sp, lr, pc
