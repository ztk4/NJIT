title Message Protocol



// Alice is a new user.
participantgroup #pink Alice
database IDB A
actor Browser A
end

// This is the server itself.
participantgroup #lightgray Message Server
participant Web API
database Message DB
end

// Bob is an existing user.
participantgroup #lightblue Bob
actor Browser B
database IDB B
end

// New User Flow
group New User [User-to-Server Public Key Advertisement]

note over Browser A: 1. Generate Key Pairs:\n  I--A--, S--A--, O--A1--, O--A2--, ..., O--Ak--.\n2. Sign key S--A-- with key I--A--.

Browser A -> Web API: Send only Public Keys\nand user metadata

note over Web API: Verify signature on S

Web API ->Message DB: Store public keys\nand metadata
Web API --> Browser A: User Created

note over Browser A: Encrypt key pairs with a \npassword + salt derived key

Browser A ->IDB A: Store encrypted keys\nand salt

end

// Alice would like to message Bob for
// the first time.
// Requires a Key Exchange.
group New Chat [User-to-User Key Exchange]

IDB A <-->Browser A: Retrieve key pairs
Browser A ->Web API: Request Bob's PKs:\nI--B--, S--B--, and one O--Bk--

Web API <-->Message DB: Retrieve PKs
note over Message DB: Remove O--Bk--

Web API-->Browser A: Return PKs

note over Browser A: 1. Genrate an ephemeral key pair E--A--\n2. Generate shared_secret as:\n  ECDH(I--A--, S--B--) || ECDH(E--A--, I--B--) || \n  ECDH(E--A--, S--B--) || ECDH(E--A--, O--Bk--)\n3. Create Root and Chain keys as:\n  (RK--AB1--,CK--AB1,1--) = HKDF(shared_secret)\n4. Prepend metadata to any messages:\n  PKs of (I--A--, E--A--) and O--B-- index k

Browser A ->IDB A: Store keys

loop Initial Messages
linear on
Browser A ->Web API: Send message w/ metadata\n(see below)
Web API->Message DB: Store until Bob online
linear off
end 

Browser B<-->IDB B: Retrieve key pairs
Browser B->Web API: Get any messages
Web API-->Browser B: Return messages

Browser B-->IDB B: Remove stored O--Bk--

note over Browser B:1. Generate shared_secret as:\n  ECDH(S--B--, I--A--) || ECDH(I--B--, E--A--) || \n  ECDH(S--B--, E--A--) || ECDH(O--Bk--, E--A--)\n2.Create Root and Chain keys as:\n  (RK--AB1--,CK--AB1,1--) = HKDF(shared_secret)\n3. Decrypt message (see below).

Browser B->IDB B: Store keys

end

group Message Exchange [User-to-User Messages]

Browser A <-->IDB A: Retrieve keys

note over Browser A: Generate new ephemeral key pair E--A--

loop Send j'th Message

note over Browser A:1. Generate Message Key as:\n  M--ABj-- = HMAC(CK--AB1,j--, 0x01)\n2. Update Chain Key as:\n  CK--AB1,j+1-- = HMAC(CK--AB1,j--, 0x02)\n3. Decompose M--ABj-- as:\n  (AES--key--, HMAC--key--, AES--iv--) = M--ABj--\n4. Pepare message as:\n  Metadata: PK of E--A--, index (1,j), *etc.\n  Body: Enc(msg, AES--key--, AES--iv--)\n  Auth: HMAC(Metadata || Body, HMAC--key--)

linear on
Browser A ->Web API: Send (Metadata, Body, Auth)
Web API->Message DB: Store until Bob online
linear off

end

Browser B <-->IDB B: Retrieve keys

loop Receive j'th Message

Browser B->Web API: Get any messages
Web API-->Browser B: Return messages

note over Browser B:1. Generate Message Key as:\n  M--ABj-- = HMAC(CK--AB1,j--, 0x01)\n2. Update Chain Key as:\n  CK--AB1,j+1-- = HMAC(CK--AB1,j--, 0x02)\n3. Decompose M--ABj-- as:\n  (AES--key--, HMAC--key--, AES--iv--) = M--ABj--\n4. Decode message as:\n  Verify: Auth == HMAC(Metadata || Body, HMAC--key--)\n  msg: Dec(Body, AES--key--, AES--iv--)

end

group First DH Key Ratchet

note over Browser B:1. Generate new ephemeral key pair E--B--\n2. Update Root and Chain Key as:\n  (RK--AB2--,CK--AB2,1--) = HMAC(RK--AB1--, ECDH(E--B--, E--A--))

end

ref over IDB A,IDB B: **++.\n.\n.++**

end
